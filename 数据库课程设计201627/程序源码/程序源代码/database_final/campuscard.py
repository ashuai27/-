# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'campuscard.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import sys
import service

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui_MainWindow,self).__init__()
        self.setupUi(self)
        self.retranslateUi(self)
    def setupUi(self, MainWindow):

        # MainWindow.setObjectName("MainWindow")
        # 设置窗口大小
        MainWindow.resize(758, 464)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        # self.centralwidget.setObjectName("centralwidget")

        # 退出按钮
        self.btnExit = QtWidgets.QPushButton(self.centralwidget)
        self.btnExit.setGeometry(570, 3, 51, 31)
        # self.btnExit.setObjectName("btnExit")

        # 删除按钮
        self.btnDel = QtWidgets.QPushButton(self.centralwidget)
        self.btnDel.setGeometry(510, 3, 51, 31)
        # self.btnDel.setObjectName("btnDel")

        # 添加按钮
        self.btnAdd = QtWidgets.QPushButton(self.centralwidget)
        self.btnAdd.setGeometry(390, 3, 51, 31)
        # self.btnAdd.setObjectName("btnAdd")

        # 修改按钮
        self.btnEdit = QtWidgets.QPushButton(self.centralwidget)
        self.btnEdit.setGeometry(450, 3, 51, 31)
        # self.btnEdit.setObjectName("btnEdit")

        # 查询按钮
        self.btnQuery = QtWidgets.QPushButton(self.centralwidget)
        self.btnQuery.setGeometry(330, 3, 51, 31)
        # self.btnQuery.setObjectName("btnQuery")


        self.tbStudent = QtWidgets.QTableWidget(self.centralwidget)
        self.tbStudent.setGeometry(30, 40, 701, 291)
        self.tbStudent.setMinimumSize(701, 0)
        # self.tbStudent.setObjectName("tbStudent")
        self.tbStudent.setColumnCount(7)
        self.tbStudent.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(6, item)

        #姓名文本框和输入框
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(123, 353, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.editName = QtWidgets.QLineEdit("",self.centralwidget)
        self.editName.setGeometry(QtCore.QRect(160, 353, 71, 20))
        self.editName.setObjectName("editName")

        #学号文本框和输入框
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(240, 353, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.editStuid = QtWidgets.QLineEdit("",self.centralwidget)
        self.editStuid.setGeometry(QtCore.QRect(280, 353, 91, 20))
        self.editStuid.setText("")
        self.editStuid.setObjectName("editStuid")

        #班级文本框和输入框
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(376, 353, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.editClass = QtWidgets.QLineEdit("",self.centralwidget)
        self.editClass.setGeometry(QtCore.QRect(420, 353, 71, 20))
        self.editClass.setText("")
        self.editClass.setObjectName("editClass")

        #校园卡状态文本框与下拉选择框
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(500, 353, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.cboxStatus = QtWidgets.QComboBox(self.centralwidget)
        self.cboxStatus.setGeometry(QtCore.QRect(550, 353, 61, 22))
        self.cboxStatus.setObjectName("cboxStatus")
        self.cboxStatus.addItem("")
        self.cboxStatus.addItem("")

        #校园卡号文本与输入框
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(123, 383, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.editCampuscardID = QtWidgets.QLineEdit("",self.centralwidget)
        self.editCampuscardID.setGeometry(QtCore.QRect(197, 383, 121, 20))
        self.editCampuscardID.setObjectName("editCampuscardID")

        #余额文本框与输入框
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(323, 383, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.editBalance = QtWidgets.QLineEdit("0",self.centralwidget)
        self.editBalance.setGeometry(400, 383, 91, 20)
        # self.editBalance.setObjectName("edit")

        # self.label = QtWidgets.QLabel(self.centralwidget)
        # self.label.setGeometry(30, 350, 71, 71)
        # font = QtGui.QFont()
        # font.setPointSize(20)
        # font.setBold(True)
        # font.setWeight(75)
        # self.label.setFont(font)
        # self.label.setStyleSheet("color: rgb(255, 0, 0);")
        # self.label.setWordWrap(True)
        # self.label.setObjectName("label")

        # 最左上角学号文本与输入框
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(40, 10, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.editStuid_2 = QtWidgets.QLineEdit("",self.centralwidget)
        self.editStuid_2.setGeometry(QtCore.QRect(77, 10, 91, 20))
        self.editStuid_2.setObjectName("editStuid_2")

        # 最左上角姓名文本与输入框
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(170, 10, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.editName_2 = QtWidgets.QLineEdit("",self.centralwidget)
        self.editName_2.setGeometry(QtCore.QRect(210, 10, 71, 20))
        self.editName_2.setObjectName("editName_2")
        self.retranslateUi(MainWindow)

        MainWindow.setCentralWidget(self.centralwidget)

        self.btnExit.clicked.connect(MainWindow.close)
        # QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.tbStudent.setAlternatingRowColors(True)  # 使表格颜色交错显示
        self.tbStudent.verticalHeader().setVisible(False)  # 隐藏垂直标题
        self.query()  # 窗体加载时显示所有数据

        self.tbStudent.itemClicked.connect(self.getItem)  # 获取选中的单元格数据
        self.btnAdd.clicked.connect(self.add)  # 绑定添加按钮的单击信号
        self.btnEdit.clicked.connect(self.edit)  # 绑定修改按钮的单击信号
        self.btnDel.clicked.connect(self.delete)  # 绑定删除按钮的单击信号
        self.btnQuery.clicked.connect(self.query_2)  # 绑定查询按钮的单击信号
    #查询所有用户信息，并显示在表格中
    def query(self):
        """调用service查询函数，查询数据库中的所有数据"""
        self.tbStudent.setRowCount(0)  # 清空表格中的所有行
        result = service.query("select * from campuscard")  # 调用服务类中放的公共法执行查询语句
        row = len(result)  # 取得记录个数，用于设置表格的行数
        self.tbStudent.setRowCount(row)  # 设置表格行数
        # self.tbStudent.setColumnCount(7)  # 设置表格列数（一开始设置过了，不必要再设置了）
        #self.tbStudent.setHorizontalHeaderLabels(['校园卡号', '学号', '姓名', '班级', '余额', '状态', '创建时间']) # 设置表格的标题名称

        for i in range(row):  # 遍历行
            for j in range(self.tbStudent.columnCount()):  # 遍历列
                data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                self.tbStudent.setItem(i, j, data)  # 设置每个单元格的数据
        # self.clear_input_table()


    def query_2(self):
        Stuid_2 = self.editStuid_2.text()  # 记录学号
        temp1 = "%" + Stuid_2 + "%"
        Name_2 = self.editName_2.text()  # 记录姓名
        temp2 = "%" + Name_2 + "%"
        if Stuid_2 != "" and Name_2 =="":
            self.tbStudent.setRowCount(0)  # 清空表格中的所有行
            result = service.query("select * from campuscard where studentid like %s ", (temp1,))  # 调用服务类中方的公共法执行查询语句
            row = len(result)  # 取得记录个数，用于设置表格的行数
            self.tbStudent.setRowCount(row)  # 设置表格行数
            # self.tbStudent.setColumnCount(7)  # 设置表格列数
            # self.tbStudent.setHorizontalHeaderLabels(['校园卡号', '学号', '姓名', '班级', '余额', '状态', '创建时间']) # 设置表格的标题名称
            for i in range(row):  # 遍历行
                for j in range(self.tbStudent.columnCount()):  # 遍历列
                    data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                    self.tbStudent.setItem(i, j, data)  # 设置每个单元格的数据
        elif Name_2 != "" and Stuid_2=="":
            self.tbStudent.setRowCount(0)  # 清空表格中的所有行
            result = service.query("select * from campuscard where sname like %s",(temp2,))  # 调用服务类中方的公共法执行查询语句
            print(result)
            row = len(result)  # 取得记录个数，用于设置表格的行数
            self.tbStudent.setRowCount(row)  # 设置表格行数
            # self.tbStudent.setColumnCount(7)  # 设置表格列数
            # self.tbStudent.setHorizontalHeaderLabels(['校园卡号', '学号', '姓名', '班级', '余额', '状态', '创建时间']) # 设置表格的标题名称
            for i in range(row):  # 遍历行
                for j in range(self.tbStudent.columnCount()):  # 遍历列
                    data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                    self.tbStudent.setItem(i, j, data)  # 设置每个单元格的数据
        else:
            self.query()
        # self.clear_input_table()

    # 获取选中的表格内容
    def getItem(self, item):
        # self.judge = 0 用来判断最后的选择是否是学号单元格用于edit函数进行修改数据
        row =  item.row()
        self.editCampuscardID.setText(self.tbStudent.item(row,0).text())
        self.editStuid.setText(self.tbStudent.item(row,1).text()) 
        self.editName.setText(self.tbStudent.item(row,2).text()) 
        self.editClass.setText(self.tbStudent.item(row,3).text())
        self.editBalance.setText(self.tbStudent.item(row,4).text()) 



    # 清空输入框
    def clear_input_table(self):
        self.editName.setText("")
        self.editStuid.setText("")
        self.editClass.setText("")
        self.editCampuscardID.setText("")
        self.editBalance.setText("")
        self.editStuid_2.setText("")
        self.editName_2.setText("")

    
    # 添加用户信息
    def add(self):
        userName = self.editName.text()  # 记录输入的姓名
        userStuid = self.editStuid.text()  # 记录输入的学号
        userClass = self.editClass.text()  # 记录输入的班级
        userStatus = self.cboxStatus.currentText()  # 记录状态
        userCampuscardID = self.editCampuscardID.text()  # 记录输入的校园卡号
        userBalance = 0
        userBalance = self.editBalance.text()
        Createdate = QtCore.QDateTime.currentDateTime()  # 记录时间
        userCreatedate = Createdate.toString("yyyy-MM-dd")  # 对日期时间进行格式化
        if userName != "" and userStuid != "" and userClass != "" and userCampuscardID != "" :
            # 执行添加语句
            result = service.exec("insert into campuscard values(%s,%s,%s,%s,%s,%s,%s)",
                                  (userCampuscardID, userStuid, userName, userClass,userBalance, userStatus, userCreatedate))
            if result > 0:  # 如果结果大于0，说明添加成功
                self.query()  # 在表格中显示最新数据
                QMessageBox.information(None, '提示', '信息添加成功！', QMessageBox.Ok)
                self.clear_input_table()
            else:
                result = service.query("select * from campuscard where campuscardid=  %s ", (self.editCampuscardID.text(),))
                if len(result) >0:
                    QMessageBox.warning(None, '警告', '当前校园卡信息已存在，请勿重复添加！', QMessageBox.Ok)
                    self.clear_input_table()
                else:
                    QMessageBox.warning(None, '警告', '信息添加失败！', QMessageBox.Ok)

        else:
            QMessageBox.warning(None, '警告', '请输入所有数据后，再执行相关操作！', QMessageBox.Ok)
        self.clear_input_table()
    #删除用户信息
    def delete(self):
        try:
            
            if self.editCampuscardID.text() != "" : # 判断是否选择了要删除的学号数据
                result = service.query("select * from campuscard where campuscardid=  %s ;", (self.editCampuscardID.text(),))  # 调用服务类中方的公共法执行查询语句
                print("查找到",result)
                
                result0 =service.delete("delete from campuscard where campuscardid= %s;" ,(self.editCampuscardID.text(),))  # 执行删除操作
                
                print("debug",result0,self.editCampuscardID.text())
                if len(result) > 0 and result0 == 1: # 如果结果大于0，说明删除成功
                    self.query() # 在表格中显示最新数据
                    QMessageBox.information(None, '提示', '信息删除成功！', QMessageBox.Ok)
                    exist = service.query("select * from bankcard where campuscardid=  %s ;", (self.editCampuscardID.text(),))
                    result0 =service.delete("delete from bankcard where campuscardid= %s; ", (self.editCampuscardID.text(),))  # 执行删除操作
                    
                    if len(exist) >0:
                        result0 =service.delete("delete from bankcard where campuscardid= %s; ", (self.editCampuscardID.text(),))  # 执行删除操作
                        if result0 == 1:
                            QMessageBox.information(None, '提示', '银行卡解绑成功！', QMessageBox.Ok)
                        else:
                            QMessageBox.information(None, '警告', '银行卡解绑失败，请手动解除绑定！', QMessageBox.Ok)
                    
                    
                elif len(result) <= 0 and result0 == 1:
                    QMessageBox.information(None, '警告', '要删除的校园卡号信息不存在！', QMessageBox.Ok)
                elif result0 == 0:
                    QMessageBox.information(None, '警告', '删除失败，请先解除银行卡与校园卡的绑定后重试！', QMessageBox.Ok)
            else:
                QMessageBox.warning(None, '警告', '请先选择要删除的校园卡号数据！', QMessageBox.Ok)
        except:
            if len(result) > 0:
                QMessageBox.warning(None, '警告', '删除失败,请重试', QMessageBox.Ok)
            else :
                QMessageBox.information(None, '提示', '要删除的校园卡号信息不存在！', QMessageBox.Ok)
        self.clear_input_table()
    # 修改用户信息
    def edit(self):
        try:
            userName = self.editName.text()  # 记录输入的姓名
            userStuid = self.editStuid.text()  # 记录输入的学号
            userClass = self.editClass.text()  # 记录输入的班级
            userStatus = self.cboxStatus.currentText()  # 记录状态
            userCampuscardID = self.editCampuscardID.text()
            if userName != ""  and userStuid != "" and userClass != "" and userStatus != "" and userCampuscardID!="":  # 判断是否选择了要修改的数据
                CampuscardID = self.editCampuscardID.text()  # 记录要修改的校园卡号
                Stuid = self.editStuid.text()  # 记录学号
                Status = self.cboxStatus.currentText()  # 记录状态
                Name = self.editName.text()  # 记录姓名
                Class = self.editClass.text()  # 记录班级
                balance = self.editBalance.text() #记录余额
                print(CampuscardID,Stuid,Status,Name,Class,balance)

                # 执行修改操作
                exist = service.query("select * from campuscard where campuscardid=  %s ", (CampuscardID,))
                if len(exist) >0:
                    result = service.exec("update campuscard set studentid=%s, sname=%s, sclass=%s, card_status=%s ,balance=%s where CampuscardID = %s;",
                                        (Stuid, Name, Class, Status,balance, CampuscardID))
                    print(CampuscardID)
                    print(result)
                    if result > 0:  # 如果结果大于0，说明修改成功
                        self.query()  # 在表格中显示最新数据
                        QMessageBox.information(None, '提示', '信息修改成功！', QMessageBox.Ok)
                    else :
                        QMessageBox.information(None, '警告', '信息修改失败！', QMessageBox.Ok)
                else:
                    QMessageBox.information(None, '警告', '校园卡号信息不存在！', QMessageBox.Ok)
            else:
                QMessageBox.warning(None, '警告', '请输入所有信息后重试！', QMessageBox.Ok)
        except:
            QMessageBox.warning(None, '警告', '请先选择要修改的校园卡号！', QMessageBox.Ok)
        self.clear_input_table()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "校园卡管理"))
        self.btnExit.setText(_translate("MainWindow", "退出"))
        self.btnDel.setText(_translate("MainWindow", "删除"))
        self.btnAdd.setText(_translate("MainWindow", "添加"))
        self.btnEdit.setText(_translate("MainWindow", "修改"))
        self.btnQuery.setText(_translate("MainWindow", "查询"))
        item = self.tbStudent.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "校园卡号"))
        item = self.tbStudent.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "学号"))
        item = self.tbStudent.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "姓名"))
        item = self.tbStudent.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "班级"))
        item = self.tbStudent.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "余额"))
        item = self.tbStudent.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "状态"))
        item = self.tbStudent.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "创建时间"))
        self.label_4.setText(_translate("MainWindow", "姓名"))
        self.label_5.setText(_translate("MainWindow", "学号"))
        self.label_6.setText(_translate("MainWindow", "班级"))
        self.label_7.setText(_translate("MainWindow", "状态"))
        self.cboxStatus.setItemText(0, _translate("MainWindow", "激活"))
        self.cboxStatus.setItemText(1, _translate("MainWindow", "挂失"))
        self.label_8.setText(_translate("MainWindow", "校园卡号"))
        self.label_9.setText(_translate("MainWindow", "余额"))
        # self.label.setText(_translate("MainWindow", "信息设置"))
        self.label_10.setText(_translate("MainWindow", "学号"))
        self.label_11.setText(_translate("MainWindow", "姓名"))


# if __name__ == "__main__":
#     app = QApplication(sys.argv)

#     # 创建一个QWidget子类
#     w = Ui_MainWindow()
#     w.show()

#     app.exec()
