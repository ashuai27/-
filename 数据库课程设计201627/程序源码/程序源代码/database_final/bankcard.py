# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'bankcard.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import sys
import service

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui_MainWindow,self).__init__()
        self.setupUi(self)
        self.retranslateUi(self)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(766, 380)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btnExit = QtWidgets.QPushButton(self.centralwidget)
        self.btnExit.setGeometry(QtCore.QRect(650, 3, 51, 31))
        self.btnExit.setObjectName("btnExit")
        self.btnDel = QtWidgets.QPushButton(self.centralwidget)
        self.btnDel.setGeometry(QtCore.QRect(590, 3, 51, 31))
        self.btnDel.setObjectName("btnDel")
        self.btnAdd = QtWidgets.QPushButton(self.centralwidget)
        self.btnAdd.setGeometry(QtCore.QRect(470, 3, 51, 31))
        self.btnAdd.setObjectName("btnAdd")
        self.btnEdit = QtWidgets.QPushButton(self.centralwidget)
        self.btnEdit.setGeometry(QtCore.QRect(530, 3, 51, 31))
        self.btnEdit.setObjectName("btnEdit")
        self.btnQuery = QtWidgets.QPushButton(self.centralwidget)
        self.btnQuery.setGeometry(QtCore.QRect(410, 3, 51, 31))
        self.btnQuery.setObjectName("btnQuery")
        self.tbBankcard = QtWidgets.QTableWidget(self.centralwidget)
        self.tbBankcard.setGeometry(QtCore.QRect(0, 40, 761, 301))
        self.tbBankcard.setObjectName("tbBankcard")
        self.tbBankcard.setColumnCount(4)
        self.tbBankcard.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbBankcard.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbBankcard.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbBankcard.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbBankcard.setHorizontalHeaderItem(3, item)

        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(26, 10, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.editBankcardID_2 = QtWidgets.QLineEdit("",self.centralwidget)
        self.editBankcardID_2.setGeometry(QtCore.QRect(100, 10, 141, 20))
        self.editBankcardID_2.setText("")
        self.editBankcardID_2.setObjectName("editBankcardID")

        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(266, 10, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.editName_2 = QtWidgets.QLineEdit("",self.centralwidget)
        self.editName_2.setGeometry(QtCore.QRect(310, 10, 71, 20))
        self.editName_2.setObjectName("editName_2")


        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(236, 350, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.editBankcardID = QtWidgets.QLineEdit("",self.centralwidget)
        self.editBankcardID.setGeometry(QtCore.QRect(90, 350, 141, 20))
        self.editBankcardID.setText("")
        self.editBankcardID.setObjectName("editName")

        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(16, 350, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.editName = QtWidgets.QLineEdit("",self.centralwidget)
        self.editName.setGeometry(QtCore.QRect(280, 350, 71, 20))
        self.editName.setObjectName("editBankcardID")

        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(506, 350, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.editCampuscardID = QtWidgets.QLineEdit("",self.centralwidget)
        self.editCampuscardID.setGeometry(QtCore.QRect(620, 350, 101, 20))
        self.editCampuscardID.setText("")
        self.editCampuscardID.setObjectName("editCampuscardID")

        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(366, 350, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.editBalance = QtWidgets.QLineEdit("",self.centralwidget)
        self.editBalance.setGeometry(QtCore.QRect(410, 350, 71, 20))
        self.editBalance.setObjectName("editBalance")

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.btnExit.clicked.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.tbBankcard.setAlternatingRowColors(True)  # 使表格颜色交错显示
        self.tbBankcard.verticalHeader().setVisible(False)  # 隐藏垂直标题
        self.query()  # 窗体加载时显示所有数据
        self.tbBankcard.itemClicked.connect(self.getItem)  # 获取选中的单元格数据
        self.btnAdd.clicked.connect(self.add)  # 绑定添加按钮的单击信号
        self.btnEdit.clicked.connect(self.edit)  # 绑定修改按钮的单击信号
        self.btnDel.clicked.connect(self.delete)  # 绑定删除按钮的单击信号
        self.btnQuery.clicked.connect(self.query_2)  # 绑定查询按钮的单击信号




     # 获取选中的表格内容
    def getItem(self, item):
        # self.judge = 0 用来判断最后的选择是否是学号单元格用于edit函数进行修改数据
        row =  item.row()
        self.editBalance.setText(self.tbBankcard.item(row,2).text()) 
        self.editCampuscardID.setText(self.tbBankcard.item(row,3).text()) 
        self.editName.setText(self.tbBankcard.item(row,1).text()) 
        self.editBankcardID.setText(self.tbBankcard.item(row,0).text()) 
        # self.editName_2.setText(self.tbStudent.item(row,4).text()) 
        # self.editBankcardID_2.setText(self.tbStudent.item(row,4).text()) 
        

    # 清空输入框
    def clear_input_table(self):
        self.editName.setText("")
        self.editName_2.setText("")
        self.editBankcardID_2.setText("")
        self.editCampuscardID.setText("")
        self.editBalance.setText("")
        self.editBankcardID.setText("")
        
       
    #删除用户信息
    def delete(self):
        try:
            Balance = self.editBalance.text()
            CampuscardID = self.editCampuscardID.text()
            Name = self.editName.text()
            BankcardID = self.editBankcardID.text()
            if BankcardID!="" and Name!="" and CampuscardID!="" and Balance!="" : # 判断是否选择了要删除的数据
                # 执行删除操作
                
                result=service.delete("delete from bankcard where BankcardID= %s;",(BankcardID ,))
                
                if result>0: # 如果结果大于0，说明删除成功
                    self.query() # 在表格中显示最新数据
                    QMessageBox.information(None, '提示', '信息删除成功！', QMessageBox.Ok)
                    self.clear_input_table()
                else:
                    QMessageBox.warning(None, '警告', '信息删除失败！', QMessageBox.Ok)
            else:
                QMessageBox.warning(None, '警告', '请填写要删除内容的全部信息！', QMessageBox.Ok)

        except:
            QMessageBox.warning(None, '警告', '请填写要删除内容的全部信息！', QMessageBox.Ok)

    # 修改用户信息
    def query_2(self):
        BankcardID_2 = self.editBankcardID_2.text()#记录输入的银行卡号
        temp1 = "%" + BankcardID_2 + "%"
        Name_2 = self.editName_2.text()#记录输入的姓名
        temp2 = "%" + Name_2 + "%"
        if BankcardID_2 != "" and Name_2 =="":
            self.tbBankcard.setRowCount(0)  # 清空表格中的所有行
            result = service.query("select * from bankcard where Bankcardid like %s ", (temp1))  # 调用服务类中方的公共法执行查询语句
            row = len(result)  # 取得记录个数，用于设置表格的行数
            self.tbBankcard.setRowCount(row)  # 设置表格行数
            self.tbBankcard.setColumnCount(4)  # 设置表格列数
            self.tbBankcard.setHorizontalHeaderLabels(['银行卡号', '持有人姓名', '余额',  '校园卡号', ]) # 设置表格的标题名称
            for i in range(row):  # 遍历行
                for j in range(self.tbBankcard.columnCount()):  # 遍历列
                    data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                    self.tbBankcard.setItem(i, j, data)  # 设置每个单元格的数据
        elif Name_2 != "" and BankcardID_2=="":
            self.tbBankcard.setRowCount(0)  # 清空表格中的所有行
            result = service.query("select * from bankcard where sname like %s ", (temp2))  # 调用服务类中方的公共法执行查询语句
            row = len(result)  # 取得记录个数，用于设置表格的行数
            self.tbBankcard.setRowCount(row)  # 设置表格行数
            self.tbBankcard.setColumnCount(4)  # 设置表格列数
            self.tbBankcard.setHorizontalHeaderLabels(['银行卡号', '持有人姓名', '余额', '校园卡号' ]) # 设置表格的标题名称
            for i in range(row):  # 遍历行
                for j in range(self.tbBankcard.columnCount()):  # 遍历列
                    data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                    self.tbBankcard.setItem(i, j, data)  # 设置每个单元格的数据
        else:
            self.query()
    def edit(self):
        try:
            Balance = self.editBalance.text()
            CampuscardID = self.editCampuscardID.text()
            Name = self.editName.text()
            BankcardID = self.editBankcardID.text()
            if Balance != "" and CampuscardID != "" and Name != "" and BankcardID != "":  # 判断是否选择了要修改的数据
                print(1)
                
                result = service.exec("update bankcard set  sname=%s, Balance=%s, Campuscardid=%s where BankcardID=%s;",
                                      (Name, Balance, CampuscardID, BankcardID))
                if result > 0:  # 如果结果大于0，说明修改成功
                    self.query()  # 在表格中显示最新数据
                    QMessageBox.information(None, '提示', '信息修改成功！', QMessageBox.Ok)
                    self.clear_input_table()
                else:
                    QMessageBox.warning(None, '警告', '信息修改失败！', QMessageBox.Ok)
            else:
                QMessageBox.warning(None, '警告', '请将所有信息填写完毕后修改！', QMessageBox.Ok)

        except:
            QMessageBox.warning(None, '警告', '请先选择要修改的数据！', QMessageBox.Ok)

    def query(self):
        self.tbBankcard.setRowCount(0)  # 清空表格中的所有行
        result = service.query("select * from bankcard")  # 调用服务类中方的公共法执行查询语句
        row = len(result)  # 取得记录个数，用于设置表格的行数
        self.tbBankcard.setRowCount(row)  # 设置表格行数
        self.tbBankcard.setColumnCount(4)  # 设置表格列数
        self.tbBankcard.setHorizontalHeaderLabels(['银行卡号', '持有人姓名', '余额',  '校园卡号'])# 设置表格的标题名称
        for i in range(row):  # 遍历行
            for j in range(self.tbBankcard.columnCount()):  # 遍历列
                data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                self.tbBankcard.setItem(i, j, data)  # 设置每个单元格的数据
    # def getItem(self, item):
    #     if item.column() == 0:  # 如果单击的是第一列
    #         self.select = item.text() # 获取单击的单元格文本
    #         self.editBankcardID.setText(self.select) # 显示在用户名称文本框中
    def add(self):
        userBankcardID = self.editBankcardID.text()  # 记录输入的银行卡号
        userBalance = self.editBalance.text()  # 记录输入的余额
        userName = self.editName.text()  # 记录输入的姓名
        userCampuscardID = self.editCampuscardID.text()  # 记录输入的校园卡号
        if userBankcardID!="" and userBalance!="" and userName!="" and userCampuscardID!="" :   # 执行添加语句
            result = service.exec("insert into bankcard values(%s,%s,%s,%s)",
                                  (userBankcardID, userName, userBalance,  userCampuscardID,))
            if result > 0:  # 如果结果大于0，说明添加成功
                self.query()  # 在表格中显示最新数据
                QMessageBox.information(None, '提示', '信息添加成功！', QMessageBox.Ok)
                self.clear_input_table()
            else:
                QMessageBox.warning(None, '警告', '   信息添加失败，您的银行卡已注册或者\n要绑定的校园卡号不存在，请检查输入后重试！', QMessageBox.Ok)
        else:
            QMessageBox.warning(None, '警告', '请输入所有数据后，再执行相关操作！', QMessageBox.Ok)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "银行卡管理"))
        self.btnExit.setText(_translate("MainWindow", "退出"))
        self.btnDel.setText(_translate("MainWindow", "删除"))
        self.btnAdd.setText(_translate("MainWindow", "添加"))
        self.btnEdit.setText(_translate("MainWindow", "修改"))
        self.btnQuery.setText(_translate("MainWindow", "查询"))
        item = self.tbBankcard.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "银行卡号"))
        item = self.tbBankcard.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "持有人姓名"))
        item = self.tbBankcard.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "余额"))
        item = self.tbBankcard.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "绑定校园卡号"))
        self.label_7.setText(_translate("MainWindow", "银行卡号"))
        self.label_8.setText(_translate("MainWindow", "姓名"))
        self.label_9.setText(_translate("MainWindow", "姓名"))
        self.label_10.setText(_translate("MainWindow", "银行卡号"))
        self.label_11.setText(_translate("MainWindow", "绑定校园卡号"))
        self.label_12.setText(_translate("MainWindow", "余额"))


# if __name__ == "__main__":
#     app = QApplication(sys.argv)

#     # 创建一个QWidget子类
#     w = Ui_MainWindow()
#     w.show()

#     app.exec()