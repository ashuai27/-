# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'recharge(1).ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import sys
import service


class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)
        self.retranslateUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(766, 380)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btnExit = QtWidgets.QPushButton(self.centralwidget)
        self.btnExit.setGeometry(QtCore.QRect(650, 3, 51, 31))
        self.btnExit.setObjectName("btnExit")
        self.btnAdd = QtWidgets.QPushButton(self.centralwidget)
        self.btnAdd.setGeometry(QtCore.QRect(580, 3, 51, 31))
        self.btnAdd.setObjectName("btnAdd")
        self.btnQuery = QtWidgets.QPushButton(self.centralwidget)
        self.btnQuery.setGeometry(QtCore.QRect(510, 3, 51, 31))
        self.btnQuery.setObjectName("btnQuery")
        self.tbRecharge = QtWidgets.QTableWidget(self.centralwidget)
        self.tbRecharge.setGeometry(QtCore.QRect(0, 40, 761, 301))
        self.tbRecharge.setObjectName("tbRecharge")
        self.tbRecharge.setColumnCount(4)
        self.tbRecharge.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbRecharge.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbRecharge.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbRecharge.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbRecharge.setHorizontalHeaderItem(3, item)

        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(26, 10, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.editCampuscardID_2 = QtWidgets.QLineEdit("",self.centralwidget)
        self.editCampuscardID_2.setGeometry(QtCore.QRect(100, 10, 101, 20))
        self.editCampuscardID_2.setText("")
        self.editCampuscardID_2.setObjectName("editCampuscardID")

        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(270, 10, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.editSum_money = QtWidgets.QLineEdit("",self.centralwidget)
        self.editSum_money.setGeometry(QtCore.QRect(410, 10, 71, 20))
        self.editSum_money.setObjectName("editSum_recharge")

        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(390, 350, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.editCampuscardID = QtWidgets.QLineEdit("",self.centralwidget)
        self.editCampuscardID.setGeometry(QtCore.QRect(84, 350, 111, 20))
        self.editCampuscardID.setText("")
        self.editCampuscardID .setObjectName("editCampuscardID")

        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(10, 350, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.editMoney = QtWidgets.QLineEdit("",self.centralwidget)
        self.editMoney.setGeometry(QtCore.QRect(470, 350, 71, 20))
        self.editMoney.setObjectName("editMoney")

        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(200, 350, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        MainWindow.setCentralWidget(self.centralwidget)
        self.editBankcardID = QtWidgets.QLineEdit("",self.centralwidget)
        self.editBankcardID.setGeometry(QtCore.QRect(274, 350, 111, 20))
        self.editBankcardID.setText("")
        self.editBankcardID.setObjectName("editBankcardID")

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.btnExit.clicked.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.tbRecharge.setAlternatingRowColors(True)  # 使表格颜色交错显示
        self.tbRecharge.verticalHeader().setVisible(False)  # 隐藏垂直标题
        self.query()  # 窗体加载时显示所有数据
        self.btnAdd.clicked.connect(self.add)  # 绑定添加按钮的单击信号
        self.btnQuery.clicked.connect(self.query_2)  # 绑定查询按钮的单击信号
        self.tbRecharge.itemClicked.connect(self.getItem)

    def getItem(self, item): 
        # self.judge = 0 用来判断最后的选择是否是学号单元格用于edit函数进行修改数据
        row =  item.row()
        self.editCampuscardID.setText(self.tbRecharge.item(row,0).text())
        self.editBankcardID.setText(self.tbRecharge.item(row,1).text()) 
    
    def clear_input_table(self):
        
        self.editBankcardID.setText("")
        self.editCampuscardID.setText("")
        
         

    def query_2(self):
        CampuscardID_2 = self.editCampuscardID_2.text()  # 记录校园卡号
        temp = "%" + CampuscardID_2 + "%"
        Sum_money = self.editSum_money.text()  # 记录总金额
        if CampuscardID_2 != "" and Sum_money == "":
            self.tbRecharge.setRowCount(0)  # 清空表格中的所有行
            result = service.query("select * from charger where CampuscardID like %s ", (temp,))  # 调用服务类中方的公共法执行查询语句
            row = len(result)  # 取得记录个数，用于设置表格的行数
            self.tbRecharge.setRowCount(row)  # 设置表格行数
            self.tbRecharge.setColumnCount(4)  # 设置表格列数
            self.tbRecharge.setHorizontalHeaderLabels(['校园卡号', '银行卡号', '充值金额', '充值时间', ])  # 设置表格的标题名称
            for i in range(row):  # 遍历行
                for j in range(self.tbRecharge.columnCount()):  # 遍历列
                    data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                    self.tbRecharge.setItem(i, j, data)  # 设置每个单元格的数据
        elif Sum_money != "" and CampuscardID_2 != "":
            self.tbRecharge.setRowCount(0)  # 清空表格中的所有行
            sql = "select * from charger where CampuscardID like '%{0}%'  and Campuscardid IN( SELECT Campuscardid   FROM charger GROUP BY Campuscardid HAVING sum(charge_money)>='{1}') ;".format(CampuscardID_2,Sum_money)
            result = service.sql_query(sql)  # 调用服务类中方的公共法执行查询语句
            row = len(result)  # 取得记录个数，用于设置表格的行数
            self.tbRecharge.setRowCount(row)  # 设置表格行数
            self.tbRecharge.setColumnCount(4)  # 设置表格列数
            self.tbRecharge.setHorizontalHeaderLabels(['校园卡号', '银行卡号', '充值金额', '充值时间', ]) # 设置表格的标题名称
            for i in range(row):  # 遍历行
                for j in range(self.tbRecharge.columnCount()):  # 遍历列
                    data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                    self.tbRecharge.setItem(i, j, data)  # 设置每个单元格的数据
        elif Sum_money != "" and CampuscardID_2 != "":
            self.tbRecharge.setRowCount(0)  # 清空表格中的所有行
            result = service.query("select * from charger where Campuscardid IN "
                                   "(SELECT Campuscardid   "
                                   "FROM charger GROUP BY Campuscardid "
                                   "HAVING sum(charge_money)>=%s) ", (Sum_money,))  # 调用服务类中方的公共法执行查询语句
            row = len(result)  # 取得记录个数，用于设置表格的行数
            self.tbRecharge.setRowCount(row)  # 设置表格行数
            self.tbRecharge.setColumnCount(4)  # 设置表格列数
            self.tbRecharge.setHorizontalHeaderLabels(['校园卡号', '银行卡号', '充值金额', '充值时间', ]) # 设置表格的标题名称
            for i in range(row):  # 遍历行
                for j in range(self.tbRecharge.columnCount()):  # 遍历列
                    data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                    self.tbRecharge.setItem(i, j, data)  # 设置每个单元格的数据
            pass
        else:
            self.query()
    def add(self):
        userCampuscardID = self.editCampuscardID.text()  # 记录输入的校园卡号
        userMoney = self.editMoney.text()  # 记录输入的金额
        userBankcardID = self.editBankcardID.text()  # 记录输入的银行卡号
        Createdate = QtCore.QDateTime.currentDateTime()  # 记录输时间
        userCreatedate = Createdate.toString("yyyy-MM-dd")  # 对日期时间进行格式化
        if userCampuscardID != "" and userMoney != "" and userBankcardID != "":  # 执行添加语句
            result = service.exec("insert into charger values(%s,%s,%s,%s);",
                                  (userCampuscardID, userBankcardID, userMoney, userCreatedate,))
            if result > 0:  # 如果结果大于0，说明添加成功
                self.query()  # 在表格中显示最新数据
                QMessageBox.information(None, '提示', '信息添加成功！', QMessageBox.Ok)
                self.clear_input_table()
            else:
                QMessageBox.information(None, '警告', '信息添加失败，请检查所有信息后重试！', QMessageBox.Ok)
        else:
            QMessageBox.warning(None, '警告', '请输入全部数据后，再执行相关操作！', QMessageBox.Ok)

        

    def query(self):
        self.tbRecharge.setRowCount(0)  # 清空表格中的所有行
        result = service.query("select * from charger")  # 调用服务类中方的公共法执行查询语句
        row = len(result)  # 取得记录个数，用于设置表格的行数
        self.tbRecharge.setRowCount(row)  # 设置表格行数
        self.tbRecharge.setColumnCount(4)  # 设置表格列数
        self.tbRecharge.setHorizontalHeaderLabels(['校园卡号', '银行卡号', '充值金额', '充值时间' ])# 设置表格的标题名称
        for i in range(row):  # 遍历行
            for j in range(self.tbRecharge.columnCount()):  # 遍历列
                data = QTableWidgetItem(str(result[i][j]))  # 转换后可插入表格
                self.tbRecharge.setItem(i, j, data)  # 设置每个单元格的数据

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "充值记录管理"))
        self.btnExit.setText(_translate("MainWindow", "退出"))
        self.btnAdd.setText(_translate("MainWindow", "添加"))
        self.btnQuery.setText(_translate("MainWindow", "查询"))
        item = self.tbRecharge.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "校园卡号"))
        item = self.tbRecharge.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "银行卡号"))
        item = self.tbRecharge.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "充值金额"))
        item = self.tbRecharge.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "充值时间"))
        self.label_7.setText(_translate("MainWindow", "校园卡号"))
        self.label_8.setText(_translate("MainWindow", "充值总金额大于："))

        self.label_9.setText(_translate("MainWindow", "充值金额"))
        self.label_10.setText(_translate("MainWindow", "校园卡号"))
        self.label_12.setText(_translate("MainWindow", "银行卡号"))


# if __name__ == "__main__":
#     app = QApplication(sys.argv)

#     # 创建一个QWidget子类
#     w = Ui_MainWindow()
#     w.show()

#     app.exec()